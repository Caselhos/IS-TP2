generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Countries {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String   @unique @db.VarChar(250)
  createdOn DateTime @default(now()) @map("created_on") @db.Timestamp(6)
  updatedOn DateTime @default(now()) @updatedAt @map("updated_on") @db.Timestamp(6)

  @@map("countries")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model teachers {
  name       String?  @db.VarChar(100)
  city       String?  @db.VarChar(100)
  created_on DateTime @default(now()) @db.Timestamp(6)
  updated_on DateTime @default(now()) @db.Timestamp(6)

  @@ignore
}

model albums {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String   @unique @db.VarChar(250)
  release_date DateTime @unique @db.Date
  created_on   DateTime @default(now()) @db.Timestamp(6)
  updated_on   DateTime @default(now()) @db.Timestamp(6)
  musics       musics[]
}

model artists {
  id             String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String          @unique @db.VarChar(250)
  created_on     DateTime        @default(now()) @db.Timestamp(6)
  updated_on     DateTime        @default(now()) @db.Timestamp(6)
  artists_musics artists_musics?
}

model artists_musics {
  artist_id String  @unique @db.Uuid
  music_id  String  @unique @db.Uuid
  artists   artists @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  musics    musics  @relation(fields: [music_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([artist_id, music_id])
}

model musics {
  id             String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  spotify_id     String          @db.VarChar(250)
  name           String          @db.VarChar(250)
  album_id       String?         @db.Uuid
  created_on     DateTime        @default(now()) @db.Timestamp(6)
  updated_on     DateTime        @default(now()) @db.Timestamp(6)
  artists_musics artists_musics?
  albums         albums?         @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "musics_albums_id_fk")
}
